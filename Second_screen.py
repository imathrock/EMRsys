from PyQt5 import QtCore, QtGui, QtWidgets
from Third_Screen import Ui_MainWindowww
from fourth_screen import Ui_MainWindowwww
import Bill_pdfer
import os
import connection
import mysql.connector
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator

mydb = connection.mydb

class Ui_MainWindoww(object):
    def setupUi(self, MainWindow,lol,rez):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 856)
        MainWindow.setStyleSheet("background-color: skyblue")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Tabs = QtWidgets.QTabWidget(self.centralwidget)
        self.Tabs.setGeometry(QtCore.QRect(10, 100, 1475, 711))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Tabs.setFont(font)
        self.Tabs.setObjectName("Tabs")
        self.Tabs.setStyleSheet("background-color: turquoise")
        self.Tabs.setFont(font)
        self.History = QtWidgets.QWidget()
        self.History.setObjectName("History")
        self.Errorlabel = QtWidgets.QLabel(self.History)
        self.Errorlabel.setGeometry(QtCore.QRect(300, 10, 500, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Errorlabel.setFont(font)
        self.Errorlabel.setObjectName("Errorlabel")
        self.Patient_history_table = QtWidgets.QTableWidget(self.History)
        validator = QRegExpValidator(QRegExp(r'[0-9]+'))
        self.Patient_history_table.setGeometry(QtCore.QRect(30, 70, 1400, 501))
        self.Patient_history_table.setObjectName("Patient_history_table")
        self.Patient_history_table.setColumnCount(15)
        self.Patient_history_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.Patient_history_table.setHorizontalHeaderItem(14, item)
        self.Patient_history_table.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.Patient_history_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.Patient_history_table.doubleClicked.connect(lambda : self.checkrepeattransaction(lol,rez))
        self.Patient_history_table.setFont(font)
        self.Patient_history_table.setStyleSheet("background-color: lightgrey")
        self.Tabs.addTab(self.History, "")
        self.Del_txn = QtWidgets.QPushButton(self.History,clicked = lambda : self.Delete_Recent(lol))
        self.Del_txn.setGeometry(QtCore.QRect(890, 580, 200, 60))
        self.Del_txn.setObjectName("Delete Record")
        self.Del_txn.setStyleSheet("background-color: lightgrey")
        self.Del_txn.setFont(font)
        self.Show_patient_details = QtWidgets.QPushButton(self.History,clicked = lambda : self.Show_ALl_Patient_Identity_details(lol))
        self.Show_patient_details.setGeometry(QtCore.QRect(1110, 580, 200, 60))
        self.Show_patient_details.setObjectName("Show_patient_details")
        self.Show_patient_details.setStyleSheet("background-color: lightgrey")
        self.Show_patient_details.setFont(font)
        self.Mesaurements_and_treatments = QtWidgets.QWidget()
        self.Mesaurements_and_treatments.setObjectName("Mesaurements_and_treatments")
        self.Procedure1 = QtWidgets.QComboBox(self.Mesaurements_and_treatments)
        self.Procedure1.setGeometry(QtCore.QRect(960, 130, 251, 51))
        self.Procedure1.setObjectName("Procedure1")
        self.Procedure1.addItem(" ")
        self.Procedure1.addItem("Normal Wound Dressing")
        self.Procedure1.addItem("Surgical Dressing")
        self.Procedure1.addItem("CLW suturing")
        self.Procedure1.addItem("Catheterization")
        self.Procedure1.addItem("ECG")
        self.Procedure1.addItem("Sugar mesurement")
        self.Procedure1.addItem("Nebulization")
        self.Procedure1.addItem("Injections")
        self.Procedure1.addItem("Chemotherapy Nursing")
        self.Procedure1.addItem("Limb Therapy")
        self.Procedure2 = QtWidgets.QComboBox(self.Mesaurements_and_treatments)
        self.Procedure2.setGeometry(QtCore.QRect(960, 270, 251, 51))
        self.Procedure2.setObjectName("Procedure2")
        self.Procedure2.addItem(" ")
        self.Procedure2.addItem("Normal Wound Dressing")
        self.Procedure2.addItem("Surgical Dressing")
        self.Procedure2.addItem("CLW suturing")
        self.Procedure2.addItem("Catheterization")
        self.Procedure2.addItem("ECG")
        self.Procedure2.addItem("Sugar mesurement")
        self.Procedure2.addItem("Nebulization")
        self.Procedure2.addItem("Injections")
        self.Procedure2.addItem("Chemotherapy Nursing")
        self.Procedure2.addItem("Limb Therapy")
        self.Procedure3 = QtWidgets.QComboBox(self.Mesaurements_and_treatments)
        self.Procedure3.setGeometry(QtCore.QRect(960, 420, 251, 51))
        self.Procedure3.setObjectName("Procedure3")
        self.Procedure3.addItem(" ")
        self.Procedure3.addItem("Normal Wound Dressing")
        self.Procedure3.addItem("Surgical Dressing")
        self.Procedure3.addItem("CLW suturing")
        self.Procedure3.addItem("Catheterization")
        self.Procedure3.addItem("ECG")
        self.Procedure3.addItem("Sugar mesurement")
        self.Procedure3.addItem("Nebulization")
        self.Procedure3.addItem("Injections")
        self.Procedure3.addItem("Chemotherapy Nursing")
        self.Procedure3.addItem("Limb Therapy")
        self.Procedure1.setStyleSheet("background-color: lightgrey")
        self.Procedure2.setStyleSheet("background-color: lightgrey")
        self.Procedure3.setStyleSheet("background-color: lightgrey")
        self.Temperature = QtWidgets.QLineEdit(self.Mesaurements_and_treatments)
        self.Temperature.setGeometry(QtCore.QRect(30, 90, 161, 41))
        self.Temperature.setObjectName("Temperature")
        self.Temperature.setValidator(validator)    #Registry validator
        self.Temperature.setStyleSheet("background-color: lightgrey")
        self.Temperature.setFont(font)
        self.BPSyst = QtWidgets.QLineEdit(self.Mesaurements_and_treatments)
        self.BPSyst.setGeometry(QtCore.QRect(30, 180, 71, 41))
        self.BPSyst.setObjectName("BP")
        self.BPSyst.setValidator(validator)
        self.BPSyst.setStyleSheet("background-color: lightgrey")
        self.BPSyst.setFont(font)
        self.BPDia = QtWidgets.QLineEdit(self.Mesaurements_and_treatments)
        self.BPDia.setGeometry(QtCore.QRect(100, 180, 71, 41))
        self.BPDia.setObjectName("BP")
        self.BPDia.setValidator(validator)
        self.BPDia.setStyleSheet("background-color: lightgrey")
        self.BPDia.setFont(font)
        self.Pulse = QtWidgets.QLineEdit(self.Mesaurements_and_treatments)
        self.Pulse.setGeometry(QtCore.QRect(30, 280, 161, 41))
        self.Pulse.setObjectName("Pulse")
        self.Pulse.setValidator(validator)
        self.Pulse.setFont(font)
        self.Pulse.setStyleSheet("background-color: lightgrey")
        self.Oxygen_saturation = QtWidgets.QLineEdit(self.Mesaurements_and_treatments)
        self.Oxygen_saturation.setGeometry(QtCore.QRect(30, 370, 161, 41))
        self.Oxygen_saturation.setObjectName("Oxygen_saturation")
        self.Oxygen_saturation.setValidator(validator)
        self.Oxygen_saturation.setStyleSheet("background-color: lightgrey")
        self.Oxygen_saturation.setFont(font)
        self.RBS = QtWidgets.QLineEdit(self.Mesaurements_and_treatments)
        self.RBS.setGeometry(QtCore.QRect(30, 470, 161, 41))
        self.RBS.setObjectName("RBS")
        self.RBS.setValidator(validator)
        self.RBS.setStyleSheet("background-color: lightgrey")
        self.RBS.setFont(font)
        self.Weight = QtWidgets.QLineEdit(self.Mesaurements_and_treatments)
        self.Weight.setGeometry(QtCore.QRect(30, 560, 161, 41))
        self.Weight.setObjectName("Weight")
        self.Weight.setValidator(validator)
        self.Weight.setStyleSheet("background-color: lightgrey")
        self.Weight.setFont(font)
        self.Patients_complaints = QtWidgets.QTextEdit(self.Mesaurements_and_treatments)
        self.Patients_complaints.setGeometry(QtCore.QRect(340, 110, 461, 111))
        self.Patients_complaints.setObjectName("Patients_complaints")
        self.Patients_complaints.setStyleSheet("background-color: lightgrey")
        self.Patients_complaints.setFont(font)
        self.Clinical_Notes = QtWidgets.QTextEdit(self.Mesaurements_and_treatments)
        self.Clinical_Notes.setGeometry(QtCore.QRect(340, 280, 461, 111))
        self.Clinical_Notes.setObjectName("Clinical_Notes")
        self.Clinical_Notes.setStyleSheet("background-color: lightgrey")
        self.Clinical_Notes.setFont(font)
        self.Treatment_Advised = QtWidgets.QTextEdit(self.Mesaurements_and_treatments)
        self.Treatment_Advised.setGeometry(QtCore.QRect(340, 460, 461, 111))
        self.Treatment_Advised.setObjectName("Treatment_Advised")
        self.Treatment_Advised.setStyleSheet("background-color: lightgrey")
        self.Treatment_Advised.setFont(font)
        self.label = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label.setGeometry(QtCore.QRect(30, 60, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_2.setGeometry(QtCore.QRect(30, 150, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_3.setGeometry(QtCore.QRect(30, 250, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_4.setGeometry(QtCore.QRect(30, 340, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_5.setGeometry(QtCore.QRect(30, 440, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_6.setGeometry(QtCore.QRect(30, 530, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_7.setGeometry(QtCore.QRect(340, 80, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_8.setGeometry(QtCore.QRect(340, 250, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_9.setGeometry(QtCore.QRect(340, 430, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_10.setGeometry(QtCore.QRect(960, 100, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_11.setGeometry(QtCore.QRect(960, 240, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.label_12.setGeometry(QtCore.QRect(960, 390, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.error = QtWidgets.QLabel(self.Mesaurements_and_treatments)
        self.error.setGeometry(QtCore.QRect(400, 600, 400, 30))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.error.setFont(font)
        self.error.setObjectName("error")
        self.Follow_up = QtWidgets.QCheckBox(self.Mesaurements_and_treatments)
        self.Follow_up.setGeometry(QtCore.QRect(950, 500, 201, 51))
        self.Follow_up.setText("Follow_up?")
        self.Follow_up.setStyleSheet("background-color: lightgrey")
        self.Follow_up.setFont(font)
        self.Update_Data = QtWidgets.QPushButton(self.Mesaurements_and_treatments,clicked = lambda : self.updatepatient(lol,rez))
        self.Update_Data.setGeometry(QtCore.QRect(1110, 580, 171, 61))
        self.Update_Data.setObjectName("Update_Data")
        self.Update_Data.setStyleSheet("background-color: lightgrey")
        self.Update_Data.setFont(font)
        self.Tabs.addTab(self.Mesaurements_and_treatments, "")
        self.Bill_History = QtWidgets.QWidget()
        self.Bill_History.setObjectName("Bill_History")
        self.Bill_history_table = QtWidgets.QTableWidget(self.Bill_History)
        self.Bill_history_table.setGeometry(QtCore.QRect(30, 70, 1400, 501))
        self.Bill_history_table.setObjectName("Bill_history_table")
        self.Bill_history_table.setColumnCount(8)
        self.Bill_history_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bill_history_table.setHorizontalHeaderItem(7, item)
        self.Bill_history_table.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.Bill_history_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.Bill_history_table.doubleClicked.connect(lambda : self.biller(lol) )
        self.Bill_history_table.setStyleSheet("background-color: lightgrey")
        self.Bill_history_table.setFont(font)
        self.Refresh = QtWidgets.QPushButton(self.Bill_History,clicked = lambda : self.load_history(lol,rez))
        self.Refresh.setGeometry(QtCore.QRect(890, 580, 200, 60))
        self.Refresh.setObjectName("Refresh")
        self.Refresh.setStyleSheet("background-color: lightgrey")
        self.Refresh.setFont(font)
        self.Tabs.addTab(self.Bill_History,"")
        self.Title = QtWidgets.QLabel(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(540, 20, 211, 91))
        font = QtGui.QFont()
        font.setFamily("Mistral")
        font.setPointSize(48)
        self.Title.setFont(font)
        self.Title.setObjectName("Title")
        self.Name = QtWidgets.QLabel(self.centralwidget)
        self.Name.setGeometry(QtCore.QRect(870, 50, 401, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Name.setFont(font)
        self.Name.setObjectName("Name")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1314, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.Tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.load_history(lol,rez)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EMRsys"))
        item = self.Patient_history_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Temperature"))
        item = self.Patient_history_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Pulse"))
        item = self.Patient_history_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "BP Diastolic"))
        item = self.Patient_history_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "BP Systolic"))
        item = self.Patient_history_table.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Oxygen level"))
        item = self.Patient_history_table.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "RBS"))
        item = self.Patient_history_table.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Weight"))
        item = self.Patient_history_table.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "Procedure1"))
        item = self.Patient_history_table.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "Procedure2"))
        item = self.Patient_history_table.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "Procedure3"))
        item = self.Patient_history_table.horizontalHeaderItem(11)
        item.setText(_translate("MainWindow", "Patient Complaints"))
        item = self.Patient_history_table.horizontalHeaderItem(12)
        item.setText(_translate("MainWindow", "Clinical Notes"))
        item = self.Patient_history_table.horizontalHeaderItem(13)
        item.setText(_translate("MainWindow", "Treatment advised"))
        item = self.Patient_history_table.horizontalHeaderItem(14)
        item.setText(_translate("MainWindow", "Date of visit"))
        item = self.Patient_history_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Tx_ID"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.History), _translate("MainWindow", "History"))
        self.label.setText(_translate("MainWindow", "Temperature"))
        self.label_2.setText(_translate("MainWindow", "BP"))
        self.label_3.setText(_translate("MainWindow", "Pulse"))
        self.label_4.setText(_translate("MainWindow", "Oxygen saturation"))
        self.label_5.setText(_translate("MainWindow", "RBS"))
        self.label_6.setText(_translate("MainWindow", "Weight"))
        self.label_7.setText(_translate("MainWindow", "Patient\'s complaints"))
        self.label_8.setText(_translate("MainWindow", "Clinical Notes"))
        self.label_9.setText(_translate("MainWindow", "Treatment Advised"))
        self.label_10.setText(_translate("MainWindow", "Procedure 1"))
        self.label_11.setText(_translate("MainWindow", "Procedure 2"))
        self.label_12.setText(_translate("MainWindow", "Procedure 3"))
        self.error.setText(_translate("MainWindow", ""))
        self.Errorlabel.setText(_translate("MainWindow", " "))
        self.Update_Data.setText(_translate("MainWindow", "Update Data"))
        self.Show_patient_details.setText(_translate("MainWindow", "Patient Details"))
        self.Del_txn.setText(_translate("MainWindow", "Delete Record"))
        self.Refresh.setText(_translate("MainWindow", "Refresh"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Mesaurements_and_treatments), _translate("MainWindow", "Measurements and treatments"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Bill_History), _translate("MainWindow", "Bill History"))
        self.Title.setText(_translate("MainWindow", "EMRsys"))
        self.Name.setText(_translate("MainWindow", "Name:"))

    def updatepatient(self,data,rez):
        global pt_Visit_Type
        pt_UID = data[0]
        if self.Temperature.text() or self.Pulse.text() or self.BPSyst.text() or self.BPDia.text() or self.Oxygen_saturation.text() or self.RBS.text() or self.Weight.text() != 0:
            if self.Clinical_Notes.toPlainText() or self.Patients_complaints.toPlainText() or self.Treatment_Advised.toPlainText() != "":
                if self.tempcheck(self.Temperature.text()) or self.BPsystcheck(self.BPSyst.text()) or self.BPdiacheck(self.BPDia.text()) or self.pulsecheck(self.Pulse.text()) or self.Oxycheck(self.Oxygen_saturation.text()) or self.RBScheck(self.RBS.text()) or self.weightcheck(self.Weight.text()) == True:
                    pt_temperature = self.Temperature.text()
                    pt_pulse_rate = self.Pulse.text()
                    pt_bp_Systolic = self.BPSyst.text()
                    pt_bp_Diastolic = self.BPDia.text()
                    pt_oxygen_level = self.Oxygen_saturation.text()
                    pt_RBS = self.RBS.text()
                    pt_weight = self.Weight.text()
                    pt_procedure_1 = self.Procedure1.currentText()
                    pt_procedure_2 = self.Procedure2.currentText()
                    pt_procedure_3 = self.Procedure3.currentText()
                    pt_clinical_notes = self.Clinical_Notes.toPlainText()
                    pt_Patient_complaints = self.Patients_complaints.toPlainText()
                    pt_investigations_and_treatment_advised = self.Treatment_Advised.toPlainText()
                    pt_Visit_Type = 0
                    if self.Follow_up.isChecked():
                        pt_Visit_Type = 1
                    val = (
                        pt_Visit_Type, pt_temperature, pt_pulse_rate, pt_bp_Systolic, pt_bp_Diastolic, pt_oxygen_level,
                        pt_RBS, pt_weight, pt_procedure_1, pt_procedure_2, pt_procedure_3, pt_Patient_complaints,
                        pt_clinical_notes, pt_investigations_and_treatment_advised, pt_UID[0])
                    connection.load_into_patient_history(val) ## My Update function
                    self.Temperature.clear()
                    self.Pulse.clear()
                    self.BPSyst.clear()
                    self.BPDia.clear()
                    self.Oxygen_saturation.clear()
                    self.RBS.clear()
                    self.Weight.clear()
                    self.Procedure1.setCurrentIndex(0)
                    self.Procedure2.setCurrentIndex(0)
                    self.Procedure3.setCurrentIndex(0)
                    self.Clinical_Notes.clear()
                    self.Patients_complaints.clear()
                    self.Treatment_Advised.clear()
                    self.error.setText("History Updated")
                    self.error.setStyleSheet("background-color: turquoise")
                    font = QtGui.QFont()
                    font.setPointSize(18)
                    self.load_history(data, rez) # Reloading the table to show the recently added entry
                else:
                    self.error.setText("Entered values are not possible")
                    self.error.setStyleSheet("background-color: red")
                    font = QtGui.QFont()
                    font.setPointSize(18)
            else:
                self.error.setText("All Fields are Mandatory")
                self.error.setStyleSheet("background-color: red")
                font = QtGui.QFont()
                font.setPointSize(18)
    def checkrepeattransaction(self,data,rez):
        Tx_ID = self.Patient_history_table.item(self.Patient_history_table.currentRow(),0).text()
        if connection.check_repeat_transaction(Tx_ID) == True:
            self.Errorlabel.setText("This visit has already been billed")
            self.Errorlabel.setStyleSheet("background-color: red")
            font = QtGui.QFont()
            font.setPointSize(25)
        else:
            self.Openbillwindow(data,rez,Tx_ID)
    def Openbillwindow(self,data,rez,Tx_ID):
        pricee = 900
        val = (data[0][0],Tx_ID)
        Visit_type = connection.extract_visit_type(val)
        if Visit_type[0][0] == 0:
            pricee = 900
        else:
            pricee = 450
        procedures = connection.extract_procedure_data(val)
        bill = connection.get_charge(procedures[0][0])[0][0]+connection.get_charge(procedures[0][1])[0][0]+connection.get_charge(procedures[0][2])[0][0]+pricee
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindowww()
        self.ui.setupUi(self.window,data,bill,rez,Tx_ID)
        self.window.show()
        self.ui.windopopulate(data,bill,rez)

    def load_history(self, data,nem):
        self.Patient_history_table.setRowCount(0)
        self.Patient_history_table.setColumnWidth(0,0)
        self.Patient_history_table.setColumnWidth(1,100)
        self.Patient_history_table.setColumnWidth(2,100)
        self.Patient_history_table.setColumnWidth(3,100)
        self.Patient_history_table.setColumnWidth(4,100)
        self.Patient_history_table.setColumnWidth(5,100)
        self.Patient_history_table.setColumnWidth(6,100)
        self.Patient_history_table.setColumnWidth(7,100)
        self.Patient_history_table.setColumnWidth(8,300)
        self.Patient_history_table.setColumnWidth(9,300)
        self.Patient_history_table.setColumnWidth(10,300)
        self.Patient_history_table.setColumnWidth(11,300)
        self.Patient_history_table.setColumnWidth(12,300)
        self.Patient_history_table.setColumnWidth(13,300)
        self.Patient_history_table.setColumnWidth(14,300)
        result = connection.load_patient_history(data[0])
        for x in result:
            self.Addtotable(x)
        self.Bill_history_table.setHorizontalHeaderLabels(['Invoice No', 'Date', 'pt_UID', 'Tx_ID', 'Total amount', 'Amount paid', 'Notes'])
        self.Bill_history_table.setRowCount(0)
        self.Bill_history_table.setColumnWidth(0,200)
        self.Bill_history_table.setColumnWidth(1,200)
        self.Bill_history_table.setColumnWidth(2,200)
        self.Bill_history_table.setColumnWidth(3,200)
        self.Bill_history_table.setColumnWidth(4,200)
        self.Bill_history_table.setColumnWidth(5,200)
        self.Bill_history_table.setColumnWidth(6,0)
        resutl = connection.load_bill_history(data[0])
        for x in resutl:
            self.Addtotabel(x)
        name = "Name:"+str(nem[0][0])+" "+str(nem[0][1])
        self.Name.setText(name)

    def Addtotable(self,coloumn):
        rownum = self.Patient_history_table.rowCount()
        self.Patient_history_table.insertRow(rownum)
        for i, coloumn in enumerate(coloumn):
            self.Patient_history_table.setItem(rownum,i,QtWidgets.QTableWidgetItem(str(coloumn)))

    def Addtotabel(self,coloumn):
        rownum = self.Bill_history_table.rowCount()
        self.Bill_history_table.insertRow(rownum)
        for i, coloumn in enumerate(coloumn):
            self.Bill_history_table.setItem(rownum,i,QtWidgets.QTableWidgetItem(str(coloumn)))

    def Delete_Recent(self,data):
        connection.delete_entry(self.Patient_history_table.item(self.Patient_history_table.currentRow(),0).text())
        self.Patient_history_table.setRowCount(0)
        result = connection.load_patient_history(data[0])
        for x in result:
            self.Addtotable(x)

    def Show_ALl_Patient_Identity_details(self,data):
        self.window = QtWidgets.QMainWindow()
        self.uii = Ui_MainWindowwww()
        self.uii.setupUi(self.window)
        self.window.show()
        self.uii.retranslateuii(data[0])

    def biller(self,pt_UID):
        Tx_ID = self.Bill_history_table.item(self.Bill_history_table.currentRow(),3).text()
        val = (pt_UID[0][0],Tx_ID)
        identity_details = connection.bill_print_data(pt_UID[0][0])
        procedure_data = connection.bill_print_data1(val)
        Bill_Data = connection.bill_print_data2(val)
        Bill_pdfer.print_bill(identity_details,procedure_data,Bill_Data) #calling the function

    def tempcheck(self,valu):
        if int(valu) > 108:
            return False
        elif int(valu) < 94:
            return False
        else:
            return True

    def BPsystcheck(self,valu):
        if int(valu) > 300:
            return False
        elif int(valu) < 95:
            return False
        else:
            return True

    def BPdiacheck(self,valu):
        if int(valu) > 150:
            return False
        elif int(valu) < 30:
            return False
        else:
            return True

    def RBScheck(self,valu):
        if int(valu) > 900:
            return False
        elif int(valu) < 50:
            return False
        else:
            return True

    def Oxycheck(self,valu):
        if int(valu) > 100:
            return False
        else:
            return True

    def weightcheck(self,valu):
        if int(valu) > 200:
            return False
        else:
            return True

    def pulsecheck(self,valu):
        if int(valu) > 150:
            return False
        else:
            return True

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())